// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RefundManagementApplication.Context;

#nullable disable

namespace RefundManagementApplication.Migrations
{
    [DbContext(typeof(RefundManagementContext))]
    [Migration("20240523144405_UserModel")]
    partial class UserModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RefundManagementApplication.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Membership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Member");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Membership = "Free",
                            Name = "Kavin",
                            Role = "Admin",
                            email = "kavinkumar.prof@gmail.com"
                        },
                        new
                        {
                            Id = 102,
                            Membership = "Free",
                            Name = "Pravin",
                            Role = "Admin",
                            email = "pravinkumar.prof@gmail.com"
                        },
                        new
                        {
                            Id = 103,
                            Membership = "Free",
                            Name = "Raju",
                            Role = "Collector",
                            email = "raju@gmail.com"
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RefundId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("RefundId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"), 1L, 1);

                    b.Property<int>("ClosedBy")
                        .HasColumnType("int");

                    b.Property<int>("ClosedByMember")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<string>("RefundStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundId");

                    b.HasIndex("CreatedByMemberId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Order", b =>
                {
                    b.HasOne("RefundManagementApplication.Models.Member", "OrderedBy")
                        .WithMany("orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RefundManagementApplication.Models.Refund", "OrderRefund")
                        .WithMany()
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderRefund");

                    b.Navigation("OrderedBy");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Refund", b =>
                {
                    b.HasOne("RefundManagementApplication.Models.Member", "CreatedByMember")
                        .WithMany()
                        .HasForeignKey("CreatedByMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByMember");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Member", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
