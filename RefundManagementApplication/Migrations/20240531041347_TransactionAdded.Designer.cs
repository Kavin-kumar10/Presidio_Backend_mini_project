// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RefundManagementApplication.Context;

#nullable disable

namespace RefundManagementApplication.Migrations
{
    [DbContext(typeof(RefundManagementContext))]
    [Migration("20240531041347_TransactionAdded")]
    partial class TransactionAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RefundManagementApplication.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Membership")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Membership = 0,
                            Name = "Kavin",
                            Role = 0,
                            email = "kavinkumar.prof@gmail.com"
                        },
                        new
                        {
                            Id = 102,
                            Membership = 0,
                            Name = "Pravin",
                            Role = 2,
                            email = "pravinkumar.prof@gmail.com"
                        },
                        new
                        {
                            Id = 103,
                            Membership = 0,
                            Name = "Raju",
                            Role = 1,
                            email = "raju@gmail.com"
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RefundId")
                        .HasColumnType("int");

                    b.Property<int?>("RefundId1")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("MemberID");

                    b.HasIndex("ProductId");

                    b.HasIndex("RefundId1");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CreatedDate = new DateTime(2024, 5, 31, 9, 43, 47, 450, DateTimeKind.Local).AddTicks(7754),
                            MemberID = 101,
                            OrderStatus = 3,
                            ProductId = 101,
                            TotalPrice = 1000.0
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefundId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPayment")
                        .HasColumnType("float");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<float>("Act_price")
                        .HasColumnType("real");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<float>("Curr_price")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Returnable")
                        .HasColumnType("int");

                    b.Property<int>("ReturnableForPrime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 101,
                            Act_price = 1200f,
                            Count = 10,
                            Curr_price = 1000f,
                            Description = "Sportsman Products",
                            Returnable = 7,
                            ReturnableForPrime = 14,
                            Title = "Soccor Football Nivia"
                        },
                        new
                        {
                            ProductId = 102,
                            Act_price = 1000f,
                            Count = 50,
                            Curr_price = 899f,
                            Description = "ANC Tws airdopes",
                            Returnable = 0,
                            ReturnableForPrime = 7,
                            Title = "Noice TWS"
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"), 1L, 1);

                    b.Property<int?>("ClosedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ClosedByMemberId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId1")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("int");

                    b.HasKey("RefundId");

                    b.HasIndex("ClosedByMemberId");

                    b.HasIndex("CreatedByMemberId");

                    b.HasIndex("PaymentId1");

                    b.ToTable("Refunds");

                    b.HasData(
                        new
                        {
                            RefundId = 1,
                            CreatedBy = 101,
                            CreatedDate = new DateTime(2024, 5, 31, 9, 43, 47, 450, DateTimeKind.Local).AddTicks(7765),
                            OrderId = 1,
                            Reason = "Damaged",
                            RefundAmount = 1000.0,
                            RefundStatus = 1
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.User", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            MemberId = 101,
                            Password = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            PasswordHashKey = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            Status = "Disabled"
                        },
                        new
                        {
                            MemberId = 102,
                            Password = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            PasswordHashKey = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            Status = "Active"
                        },
                        new
                        {
                            MemberId = 103,
                            Password = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            PasswordHashKey = new byte[] { 121, 111, 117, 114, 80, 97, 115, 115, 119, 111, 114, 100 },
                            Status = "Disabled"
                        });
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Order", b =>
                {
                    b.HasOne("RefundManagementApplication.Models.Member", "OrderedBy")
                        .WithMany("orders")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RefundManagementApplication.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RefundManagementApplication.Models.Refund", "Refund")
                        .WithMany()
                        .HasForeignKey("RefundId1");

                    b.Navigation("OrderedBy");

                    b.Navigation("Refund");

                    b.Navigation("product");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Refund", b =>
                {
                    b.HasOne("RefundManagementApplication.Models.Member", "ClosedByMember")
                        .WithMany()
                        .HasForeignKey("ClosedByMemberId");

                    b.HasOne("RefundManagementApplication.Models.Member", "CreatedByMember")
                        .WithMany()
                        .HasForeignKey("CreatedByMemberId");

                    b.HasOne("RefundManagementApplication.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId1");

                    b.Navigation("ClosedByMember");

                    b.Navigation("CreatedByMember");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.User", b =>
                {
                    b.HasOne("RefundManagementApplication.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("RefundManagementApplication.Models.Member", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
